# Generated by Django 4.2.17 on 2024-12-27 14:35

import re

import django.core.validators
from django.db import migrations, models

import tinymce.models

import csp_post_processor.fields


class Migration(migrations.Migration):

    dependencies = [
        ("forms", "0097_v267_to_v270"),
    ]

    operations = [
        migrations.AddField(
            model_name="form",
            name="introduction_page_content",
            field=csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                base_field=tinymce.models.HTMLField(
                    blank=True,
                    help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                    verbose_name="introduction page",
                ),
                blank=True,
                help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                verbose_name="introduction page",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="introduction_page_content_en",
            field=csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                base_field=tinymce.models.HTMLField(
                    blank=True,
                    help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                    verbose_name="introduction page",
                ),
                blank=True,
                help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                null=True,
                verbose_name="introduction page",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="introduction_page_content_nl",
            field=csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                base_field=tinymce.models.HTMLField(
                    blank=True,
                    help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                    verbose_name="introduction page",
                ),
                blank=True,
                help_text="Content for the introduction page that leads to the start page of the form. Leave blank to disable the introduction page.",
                null=True,
                verbose_name="introduction page",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="show_summary_progress",
            field=models.BooleanField(
                default=False,
                help_text="Whether to display the short progress summary, indicating the current step number and total amount of steps.",
                verbose_name="show summary of the progress",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="price_variable_key",
            field=models.TextField(
                blank=True,
                help_text="Key of the variable that contains the calculated submission price.",
                validators=[
                    django.core.validators.RegexValidator(
                        message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                        regex=re.compile("^(\\w|\\w[\\w.\\-]*\\w)$"),
                    )
                ],
                verbose_name="price variable key",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="formvariable",
            name="prefill_config_empty_or_complete",
        ),
        migrations.AddField(
            model_name="formvariable",
            name="prefill_options",
            field=models.JSONField(
                blank=True, default=dict, verbose_name="prefill options"
            ),
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(
                            ("prefill_plugin", ""),
                            ("prefill_attribute", ""),
                            ("prefill_options", {}),
                        ),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            ("prefill_attribute", ""),
                            models.Q(("prefill_options", {}), _negated=True),
                            ("source", "user_defined"),
                        ),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            models.Q(("prefill_attribute", ""), _negated=True),
                            ("prefill_options", {}),
                        ),
                        _connector="OR",
                    )
                ),
                name="prefill_config_component_or_user_defined",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="all_submissions_removal_limit",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Amount of days when all submissions of this form will be permanently deleted. Leave blank to use value in General Configuration.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="all submissions removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="errored_submissions_removal_limit",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Amount of days errored submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="errored submission removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="incomplete_submissions_removal_limit",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Amount of days incomplete submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="incomplete submission removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="successful_submissions_removal_limit",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Amount of days successful submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="successful submission removal limit",
            ),
        ),
        # RunPython operation removed - it was executed as part of 3.0.0 upgrade.
        migrations.AddField(
            model_name="form",
            name="submission_counter",
            field=models.PositiveIntegerField(
                default=0,
                help_text="Counter to track how many submissions have been completed for the specific form. This works in combination with the maximum allowed submissions per form and can be reset via the frontend.",
                verbose_name="submissions counter",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="submission_limit",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Maximum number of allowed submissions per form. Leave this empty if no limit is needed.",
                null=True,
                verbose_name="maximum allowed submissions",
            ),
        ),
    ]
