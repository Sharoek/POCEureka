/**
 * Dark theme implementation.
 *
 * Use this as:
 *
 *   @use './themes/dark' as dark-theme;
 *
 *   @include dark-theme.styles;
 */

/**
 * Define the CSS properties overriding default admin theme.
 */
@mixin variables {
  --primary: #037383 !important;
  --secondary: #037383 !important;

  --breadcrumbs-fg: #2fc0ec;
  --breadcrumbs-link-hover: #888;
  --breadcrumbs-bg: #333;

  --link-fg: #04a5bb;
  --link-hover-color: #b2cddf;

  --hairline-color: #686868;

  --button-hover-bg: #04a5bb;
  --default-button-bg: #04a5bb;
  --default-button-hover-bg: #888;

  --form-input-bg: #232222;
  --form-input-bg-readonly: #1a1818;
  --react-tab-border-color: var(--hairline-color);
  --list-item-active-bg: #333;
  --list-item-active-fg: #2fc0ec;
  --edit-panel-title-bg: #333;
  --edit-panel-title-fg: var(--body-fg);
  --input-group-text-bg: #333;
  --input-group-text-fg: var(--body-fg);
  --formio-dropdown-highlighted-bg: #333;
}

@mixin djai-variables {
  // use a more specific selector so that the dark theme overrides the default,
  // less specific selector.
  .djai-dropdown-menu {
    --djai-tab-bg--hover: #04a5bb;
    --djai-tab-fg--active: #fff;
    --djai-dropdown-bg--hover: #04a5bb;

    --of-djai-border-bottom-color: #333;
  }
}

/**
 * Custom CSS needed for dark theme which can't be solved just with variables.
 */
@mixin custom-css {
  input[type='text'],
  input[type='password'],
  input[type='email'],
  input[type='url'],
  input[type='number'],
  input[type='tel'],
  textarea,
  select,
  .vTextField {
    background-color: var(--form-input-bg);
    &:read-only {
      background-color: var(--form-input-bg-readonly);
    }
  }

  input[type='checkbox'],
  input[type='radio'] {
    color-scheme: dark;
  }

  body #toolbar {
    background: var(--body-bg);
  }
}

@mixin bootstrap {
  .card-header {
    background-color: #333;
  }

  .btn,
  .btn:hover {
    color: var(--body-fg);
  }

  .formio-dialog {
    background: rgba(0, 0, 0, 0.7);
    color: var(--body-fg);
  }

  .formio-dialog.formio-dialog-theme-default {
    .formio-dialog-content {
      background: var(--body-bg);
    }
  }

  .nav-tabs {
    .nav-link.active {
      color: var(--body-fg);
      background-color: var(--body-bg);
      border-color: var(--border-color) var(--border-color) var(--body-bg);
    }

    .nav-link {
      &:focus,
      &:hover {
        color: var(--body-fg);
        border-color: var(--hairline-color) var(--hairline-color) var(--body-bg);
      }
    }
  }

  .formio-button-add-another {
    color: var(--body-fg) !important;
  }

  pre {
    color: var(--body-fg);
  }
}

@mixin tinymce {
  .tox {
    .tox-toolbar__primary,
    .tox-statusbar,
    .tox-menu {
      background-color: var(--form-input-bg);
    }

    .tox-dialog,
    .tox-dialog__header,
    .tox-dialog__footer {
      background-color: var(--body-bg);
    }

    .tox-collection__item-label {
      p,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      pre {
        &[style] {
          background-color: transparent !important;
        }
      }
    }
  }

  .mce-content-body {
    // Fix dark mode selections
    [data-mce-selected='inline-boundary'] {
      background-color: #0a2647;
    }
  }
}

@mixin ckeditor-variables {
  // TODO: CKeditor uses CSS vars internally, so we can sort this out properly in the
  // future.
  // // See https://ckeditor.com/docs/ckeditor5/latest/examples/framework/theme-customization.html
  // // > View the editor CSS tyle listing
  // --ck-custom-background: var(--form-input-bg);

  // --ck-color-base-background: var(--form-input-bg);
  // --ck-color-base-foreground: var(--body-fg);

  // --ck-color-button-default-background: var(--ck-custom-background);
}

@mixin ckeditor {
  .ck-editor__main {
    // TODO: Formio uses CKEditor5, but using their dark theme seems more complex than for the tinymce.
    // So for now we keep the default theme, but ensure that the text in the editor is dark and not light.
    color: #333;
  }
}

/**
 * Aggregate the bits and pieces to define the dark theme style rules.
 */
@mixin styles {
  // Include the relevant variables
  @media (prefers-color-scheme: dark) {
    // This either gets overridden by the more specific light theme selector, or applies
    // in auto mode through the media query.
    :root {
      @include variables;
      @include ckeditor-variables;
    }

    // only apply based on browser preferences if the theme is not explicitly set to
    // light or dark
    html[data-theme='auto'] {
      @include djai-variables;
      @include custom-css;
      @include bootstrap;
      @include tinymce;
      @include ckeditor;
    }
  }

  // explicit dark-mode -> apply all relevant styles
  html[data-theme='dark'] {
    @include variables;
    @include djai-variables;
    @include custom-css;
    @include bootstrap;
    @include tinymce;
    @include ckeditor;
    @include ckeditor-variables;
  }
}
