# Generated by Django 4.2.16 on 2024-09-12 17:42

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import openforms.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("zgw_consumers", "0020_service_timeout"),
    ]

    operations = [
        migrations.CreateModel(
            name="ObjectsAPIGroupConfig",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A recognisable name for this set of Objects APIs.",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "catalogue_domain",
                    models.CharField(
                        blank=True,
                        help_text="The 'domein' attribute for the Catalogus resource in the Catalogi API.",
                        max_length=5,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]*$",
                                code="invalid",
                                message="Value must be all uppercase letters.",
                            )
                        ],
                        verbose_name="catalogus domain",
                    ),
                ),
                (
                    "catalogue_rsin",
                    models.CharField(
                        blank=True,
                        help_text="The 'rsin' attribute for the Catalogus resource in the Catalogi API.",
                        max_length=9,
                        validators=[openforms.utils.validators.RSINValidator()],
                        verbose_name="catalogus RSIN",
                    ),
                ),
                (
                    "organisatie_rsin",
                    models.CharField(
                        blank=True,
                        help_text="Default RSIN of organization, which creates the INFORMATIEOBJECT",
                        max_length=9,
                        validators=[openforms.utils.validators.RSINValidator()],
                        verbose_name="organisation RSIN",
                    ),
                ),
                (
                    "iot_submission_report",
                    models.CharField(
                        blank=True,
                        help_text="Description of the document type in the Catalogi API to be used for the submission report PDF (i.e. the INFORMATIEOBJECTTYPE.omschrijving attribute). The appropriate version will automatically be selected based on the submission timestamp and validity dates of the document type versions.",
                        max_length=80,
                        verbose_name="submission report document type description",
                    ),
                ),
                (
                    "iot_submission_csv",
                    models.CharField(
                        blank=True,
                        help_text="Description of the document type in the Catalogi API to be used for the submission report CSV (i.e. the INFORMATIEOBJECTTYPE.omschrijving attribute). The appropriate version will automatically be selected based on the submission timestamp and validity dates of the document type versions.",
                        max_length=80,
                        verbose_name="submission report CSV document type description",
                    ),
                ),
                (
                    "iot_attachment",
                    models.CharField(
                        blank=True,
                        help_text="Description of the document type in the Catalogi API to be used for the submission attachments (i.e. the INFORMATIEOBJECTTYPE.omschrijving attribute). The appropriate version will automatically be selected based on the submission timestamp and validity dates of the document type versions.",
                        max_length=80,
                        verbose_name="attachment document type description",
                    ),
                ),
                (
                    "informatieobjecttype_submission_report",
                    models.URLField(
                        blank=True,
                        help_text="Default URL that points to the INFORMATIEOBJECTTYPE in the Catalogi API to be used for the submission report PDF",
                        max_length=1000,
                        verbose_name="submission report informatieobjecttype",
                    ),
                ),
                (
                    "informatieobjecttype_submission_csv",
                    models.URLField(
                        blank=True,
                        help_text="Default URL that points to the INFORMATIEOBJECTTYPE in the Catalogi API to be used for the submission report CSV",
                        max_length=1000,
                        verbose_name="submission report CSV informatieobjecttype",
                    ),
                ),
                (
                    "informatieobjecttype_attachment",
                    models.URLField(
                        blank=True,
                        help_text="Default URL that points to the INFORMATIEOBJECTTYPE in the Catalogi API to be used for the submission attachments",
                        max_length=1000,
                        verbose_name="attachment informatieobjecttype",
                    ),
                ),
                (
                    "catalogi_service",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"api_type": "ztc"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="zgw_consumers.service",
                        verbose_name="Catalogi API",
                    ),
                ),
                (
                    "drc_service",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"api_type": "drc"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="zgw_consumers.service",
                        verbose_name="Documenten API",
                    ),
                ),
                (
                    "objects_service",
                    models.ForeignKey(
                        limit_choices_to={"api_type": "orc"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="zgw_consumers.service",
                        verbose_name="Objects API",
                    ),
                ),
                (
                    "objecttypes_service",
                    models.ForeignKey(
                        limit_choices_to={"api_type": "orc"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="zgw_consumers.service",
                        verbose_name="Objecttypes API",
                    ),
                ),
            ],
            options={
                "verbose_name": "Objects API group",
                "verbose_name_plural": "Objects API groups",
                "db_table": "registrations_objects_api_objectsapigroupconfig",
            },
        ),
        migrations.AddConstraint(
            model_name="objectsapigroupconfig",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("catalogue_domain", ""), ("catalogue_rsin", "")),
                    models.Q(
                        models.Q(("catalogue_domain", ""), _negated=True),
                        models.Q(("catalogue_rsin", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="catalogue_composite_key",
                violation_error_message="You must specify both domain and RSIN to uniquely identify a catalogue.",
            ),
        ),
        migrations.AddConstraint(
            model_name="objectsapigroupconfig",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("iot_submission_report", ""),
                    models.Q(
                        models.Q(("iot_submission_report", ""), _negated=True),
                        models.Q(("catalogue_domain", ""), _negated=True),
                        models.Q(("catalogue_rsin", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="iot_report_requires_catalogue",
                violation_error_message="You must specify a catalogue when specifying the submission report PDF document type.",
            ),
        ),
        migrations.AddConstraint(
            model_name="objectsapigroupconfig",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("iot_submission_csv", ""),
                    models.Q(
                        models.Q(("iot_submission_csv", ""), _negated=True),
                        models.Q(("catalogue_domain", ""), _negated=True),
                        models.Q(("catalogue_rsin", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="iot_csv_requires_catalogue",
                violation_error_message="You must specify a catalogue when specifying the submission report CSV document type.",
            ),
        ),
        migrations.AddConstraint(
            model_name="objectsapigroupconfig",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("iot_attachment", ""),
                    models.Q(
                        models.Q(("iot_attachment", ""), _negated=True),
                        models.Q(("catalogue_domain", ""), _negated=True),
                        models.Q(("catalogue_rsin", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="iot_attachment_requires_catalogue",
                violation_error_message="You must specify a catalogue when specifying the submission attachment document type.",
            ),
        ),
    ]
