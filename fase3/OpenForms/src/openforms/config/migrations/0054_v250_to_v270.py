# Generated by Django 4.2.11 on 2024-07-04 10:53

import functools

from django.db import migrations, models

import tinymce.models

import openforms.config.models.config
import openforms.emails.validators
import openforms.payments.validators
import openforms.template.validators


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0001_initial_to_v250"),
        ("upgrades", "0001_initial"),
        ("flags", "0013_add_required_field"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="enable_react_formio_builder",
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="payment_order_id_template",
            field=models.CharField(
                default="{year}/{public_reference}/{uid}",
                help_text="Template to use when generating payment order IDs. It should be alpha-numerical and can contain the '/._-' characters. You can use the placeholder tokens: {year}, {public_reference}, {uid}.",
                max_length=48,
                validators=[
                    openforms.payments.validators.validate_payment_order_id_template
                ],
                verbose_name="Payment Order ID template",
            ),
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="payment_order_id_prefix",
        ),
        migrations.AddField(
            model_name="theme",
            name="email_logo",
            field=models.ImageField(
                blank=True,
                help_text="Upload the email logo, visible to users who receive an email. We advise dimensions around 150px by 75px. SVG's are not permitted.",
                upload_to="logo/",
                verbose_name="email logo",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="show_form_link_in_cosign_email",
        ),
        # RunPython operation removed as part of 3.0 release cycle - these migrations are
        # guaranteed to have been executed on Open Forms 2.8.x for existing instances.
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="display_sdk_information",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="enable_demo_plugins",
        ),
    ]
