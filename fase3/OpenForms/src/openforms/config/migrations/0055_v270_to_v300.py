# Generated by Django 4.2.17 on 2024-12-27 13:58

import functools

import django.core.validators
from django.db import migrations, models

import django_jsonform.models.fields
import tinymce.models

import openforms.config.models.config
import openforms.emails.validators
import openforms.template.validators
import openforms.utils.translations
from openforms.utils.migrations_utils.fix_default_translation import (
    FixDefaultTranslations,
)


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0054_v250_to_v270"),
    ]

    operations = [
        migrations.AlterField(
            model_name="globalconfiguration",
            name="form_upload_default_file_types",
            field=django_jsonform.models.fields.ArrayField(
                base_field=models.CharField(
                    choices=[
                        ("*", "any filetype"),
                        ("image/heic", ".heic"),
                        ("image/png", ".png"),
                        ("image/jpeg", ".jpg"),
                        ("application/pdf", ".pdf"),
                        ("application/vnd.ms-excel", ".xls"),
                        (
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            ".xlsx",
                        ),
                        ("text/csv", ".csv"),
                        ("text/plain", ".txt"),
                        ("application/msword", ".doc"),
                        (
                            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            ".docx",
                        ),
                        (
                            "application/vnd.oasis.opendocument.*,application/vnd.stardivision.*,application/vnd.sun.xml.*",
                            "Open Office",
                        ),
                        (
                            "application/zip,application/zip-compressed,application/x-zip-compressed",
                            ".zip",
                        ),
                        ("application/vnd.rar", ".rar"),
                        ("application/x-tar", ".tar"),
                        ("application/vnd.ms-outlook", ".msg"),
                        (
                            "application/acad.dwg,application/autocad_dwg.dwg,application/dwg.dwg,application/x-acad.dwg,application/x-autocad.dwg,application/x-dwg.dwg,drawing/dwg.dwg,image/vnd.dwg,image/x-dwg.dwg",
                            ".dwg",
                        ),
                    ],
                    max_length=256,
                ),
                blank=True,
                default=list,
                help_text="Provide a list of default allowed file upload types. If empty, all extensions are allowed.",
                size=None,
                verbose_name="Default allowed file upload types",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_content",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/request.html",),
                    **{}
                ),
                help_text="Content of the email verification email message.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_content_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/request.html",),
                    **{}
                ),
                help_text="Content of the email verification email message.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_content_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/request.html",),
                    **{}
                ),
                help_text="Content of the email verification email message.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_subject",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/subject.txt",),
                    **{}
                ),
                help_text="Subject of the email verification email.",
                max_length=1000,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_subject_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/subject.txt",),
                    **{}
                ),
                help_text="Subject of the email verification email.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="email_verification_request_subject_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/email_verification/subject.txt",),
                    **{}
                ),
                help_text="Subject of the email verification email.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="all_submissions_removal_limit",
            field=models.PositiveIntegerField(
                default=90,
                help_text="Amount of days when all submissions will be permanently deleted",
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="all submissions removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="errored_submissions_removal_limit",
            field=models.PositiveIntegerField(
                default=30,
                help_text="Amount of days errored submissions will remain before being removed",
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="errored submission removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="incomplete_submissions_removal_limit",
            field=models.PositiveIntegerField(
                default=7,
                help_text="Amount of days incomplete submissions will remain before being removed",
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="incomplete submission removal limit",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="successful_submissions_removal_limit",
            field=models.PositiveIntegerField(
                default=7,
                help_text="Amount of days successful submissions will remain before being removed",
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="successful submission removal limit",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_title",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Request not complete yet",),
                    **{}
                ),
                help_text="The content of the confirmation page title for submissions requiring cosigning.",
                max_length=200,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_title_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Request not complete yet",),
                    **{}
                ),
                help_text="The content of the confirmation page title for submissions requiring cosigning.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_title_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Request not complete yet",),
                    **{}
                ),
                help_text="The content of the confirmation page title for submissions requiring cosigning.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_confirmation_title",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{}
                ),
                help_text="The content of the confirmation page title. You can (and should) use the 'public_reference' variable so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_confirmation_title_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{}
                ),
                help_text="The content of the confirmation page title. You can (and should) use the 'public_reference' variable so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_confirmation_title_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Confirmation: {{ public_reference }}",),
                    **{}
                ),
                help_text="The content of the confirmation page title. You can (and should) use the 'public_reference' variable so the users have a reference in case they need to contact the customer service.",
                max_length=200,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{}
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available. We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{}
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available. We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_submission_confirmation_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("config/default_cosign_submission_confirmation.html",),
                    **{}
                ),
                help_text="The content of the submission confirmation page for submissions requiring cosigning. The variables 'public_reference' and 'cosigner_email' are available. We strongly advise you to include the 'public_reference' in case users need to contact the customer service.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    )
                ],
                verbose_name="cosign submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_content",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="cosign content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_content_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="cosign content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_content_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="cosign content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_subject",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                max_length=1000,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_subject_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_confirmation_email_subject_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/cosign_subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message when the form requires cosigning. Can be overridden on the form level.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="cosign subject",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="confirmation_email_content",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="confirmation_email_content_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="confirmation_email_content_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_request_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'submission_date', 'form_url' and 'code'.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_request_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'submission_date', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="cosign_request_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{}
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'submission_date', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.RunPython(
            FixDefaultTranslations(
                app_label="config",
                model="GlobalConfiguration",
                fields=(
                    "cosign_submission_confirmation_template",
                    "cosign_submission_confirmation_title",
                    "submission_confirmation_title",
                    "cosign_confirmation_email_content",
                    "cosign_confirmation_email_subject",
                ),
            ),
            migrations.RunPython.noop,
        ),
        # RunPython operation removed as part of 3.1.0 release cycle. The upgrade checks
        # ensure that 3.0.0 has executed it.
        migrations.CreateModel(
            name="MapTileLayer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.SlugField(
                        help_text="A unique identifier for the tile layer.",
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL to the tile layer image, used to define the map component background. To ensure correct functionality of the map, EPSG 28992 projection should be used. Example value: https://service.pdok.nl/brt/achtergrondkaart/wmts/v2_0/standaard/EPSG:28992/{z}/{x}/{y}.png",
                        max_length=255,
                        verbose_name="tile layer url",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="An easily recognizable name for the tile layer, used to identify it.",
                        max_length=100,
                        verbose_name="label",
                    ),
                ),
            ],
            options={
                "verbose_name": "map tile layer",
                "verbose_name_plural": "map tile layers",
                "ordering": ("label",),
            },
        ),
    ]
